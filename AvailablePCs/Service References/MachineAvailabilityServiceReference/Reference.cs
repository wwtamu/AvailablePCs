//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 11.0.50727.1
// 
namespace AvailablePCs.MachineAvailabilityServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LabObject", Namespace="http://schemas.datacontract.org/2004/07/SIUCMachineAvailabilityService")]
    public partial class LabObject : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string LabBuildingField;
        
        private string LabCloseField;
        
        private int LabFloorField;
        
        private int LabIdField;
        
        private int LabMachineCountField;
        
        private string LabNameField;
        
        private string LabOpenField;
        
        private string LabRoomField;
        
        private string LabStatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LabBuilding {
            get {
                return this.LabBuildingField;
            }
            set {
                if ((object.ReferenceEquals(this.LabBuildingField, value) != true)) {
                    this.LabBuildingField = value;
                    this.RaisePropertyChanged("LabBuilding");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LabClose {
            get {
                return this.LabCloseField;
            }
            set {
                if ((object.ReferenceEquals(this.LabCloseField, value) != true)) {
                    this.LabCloseField = value;
                    this.RaisePropertyChanged("LabClose");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LabFloor {
            get {
                return this.LabFloorField;
            }
            set {
                if ((this.LabFloorField.Equals(value) != true)) {
                    this.LabFloorField = value;
                    this.RaisePropertyChanged("LabFloor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LabId {
            get {
                return this.LabIdField;
            }
            set {
                if ((this.LabIdField.Equals(value) != true)) {
                    this.LabIdField = value;
                    this.RaisePropertyChanged("LabId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LabMachineCount {
            get {
                return this.LabMachineCountField;
            }
            set {
                if ((this.LabMachineCountField.Equals(value) != true)) {
                    this.LabMachineCountField = value;
                    this.RaisePropertyChanged("LabMachineCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LabName {
            get {
                return this.LabNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LabNameField, value) != true)) {
                    this.LabNameField = value;
                    this.RaisePropertyChanged("LabName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LabOpen {
            get {
                return this.LabOpenField;
            }
            set {
                if ((object.ReferenceEquals(this.LabOpenField, value) != true)) {
                    this.LabOpenField = value;
                    this.RaisePropertyChanged("LabOpen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LabRoom {
            get {
                return this.LabRoomField;
            }
            set {
                if ((object.ReferenceEquals(this.LabRoomField, value) != true)) {
                    this.LabRoomField = value;
                    this.RaisePropertyChanged("LabRoom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LabStatus {
            get {
                return this.LabStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.LabStatusField, value) != true)) {
                    this.LabStatusField = value;
                    this.RaisePropertyChanged("LabStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MachineObject", Namespace="http://schemas.datacontract.org/2004/07/SIUCMachineAvailabilityService")]
    public partial class MachineObject : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int LabIdField;
        
        private string MachineIPField;
        
        private int MachineIdField;
        
        private string MachineLabelField;
        
        private string MachineMacField;
        
        private string MachineNameField;
        
        private string MachineTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LabId {
            get {
                return this.LabIdField;
            }
            set {
                if ((this.LabIdField.Equals(value) != true)) {
                    this.LabIdField = value;
                    this.RaisePropertyChanged("LabId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineIP {
            get {
                return this.MachineIPField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineIPField, value) != true)) {
                    this.MachineIPField = value;
                    this.RaisePropertyChanged("MachineIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MachineId {
            get {
                return this.MachineIdField;
            }
            set {
                if ((this.MachineIdField.Equals(value) != true)) {
                    this.MachineIdField = value;
                    this.RaisePropertyChanged("MachineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineLabel {
            get {
                return this.MachineLabelField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineLabelField, value) != true)) {
                    this.MachineLabelField = value;
                    this.RaisePropertyChanged("MachineLabel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineMac {
            get {
                return this.MachineMacField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineMacField, value) != true)) {
                    this.MachineMacField = value;
                    this.RaisePropertyChanged("MachineMac");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineName {
            get {
                return this.MachineNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineNameField, value) != true)) {
                    this.MachineNameField = value;
                    this.RaisePropertyChanged("MachineName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineType {
            get {
                return this.MachineTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineTypeField, value) != true)) {
                    this.MachineTypeField = value;
                    this.RaisePropertyChanged("MachineType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MachineAvailabilityServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string machine_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Logout", ReplyAction="http://tempuri.org/IService1/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(string machine_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Reset", ReplyAction="http://tempuri.org/IService1/ResetResponse")]
        System.Threading.Tasks.Task<bool> ResetAsync(string machine_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Initialize", ReplyAction="http://tempuri.org/IService1/InitializeResponse")]
        System.Threading.Tasks.Task<bool> InitializeAsync(string machine_name, string mac_address, string ip_address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetComputersAvailability", ReplyAction="http://tempuri.org/IService1/GetComputersAvailabilityResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<bool>> GetComputersAvailabilityAsync(string lab_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetComputersStatus", ReplyAction="http://tempuri.org/IService1/GetComputersStatusResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetComputersStatusAsync(string lab_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLabAvailability", ReplyAction="http://tempuri.org/IService1/GetLabAvailabilityResponse")]
        System.Threading.Tasks.Task<bool> GetLabAvailabilityAsync(string lab_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllLabs", ReplyAction="http://tempuri.org/IService1/GetAllLabsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AvailablePCs.MachineAvailabilityServiceReference.LabObject>> GetAllLabsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetComputersInLab", ReplyAction="http://tempuri.org/IService1/GetComputersInLabResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AvailablePCs.MachineAvailabilityServiceReference.MachineObject>> GetComputersInLabAsync(string lab_name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : AvailablePCs.MachineAvailabilityServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<AvailablePCs.MachineAvailabilityServiceReference.IService1>, AvailablePCs.MachineAvailabilityServiceReference.IService1 {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Service1Client() : 
                base(Service1Client.GetDefaultBinding(), Service1Client.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService1.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), Service1Client.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string machine_name) {
            return base.Channel.LoginAsync(machine_name);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(string machine_name) {
            return base.Channel.LogoutAsync(machine_name);
        }
        
        public System.Threading.Tasks.Task<bool> ResetAsync(string machine_name) {
            return base.Channel.ResetAsync(machine_name);
        }
        
        public System.Threading.Tasks.Task<bool> InitializeAsync(string machine_name, string mac_address, string ip_address) {
            return base.Channel.InitializeAsync(machine_name, mac_address, ip_address);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<bool>> GetComputersAvailabilityAsync(string lab_name) {
            return base.Channel.GetComputersAvailabilityAsync(lab_name);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetComputersStatusAsync(string lab_name) {
            return base.Channel.GetComputersStatusAsync(lab_name);
        }
        
        public System.Threading.Tasks.Task<bool> GetLabAvailabilityAsync(string lab_name) {
            return base.Channel.GetLabAvailabilityAsync(lab_name);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AvailablePCs.MachineAvailabilityServiceReference.LabObject>> GetAllLabsAsync() {
            return base.Channel.GetAllLabsAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<AvailablePCs.MachineAvailabilityServiceReference.MachineObject>> GetComputersInLabAsync(string lab_name) {
            return base.Channel.GetComputersInLabAsync(lab_name);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1)) {
                return new System.ServiceModel.EndpointAddress("http://it-appdev1.ad.siu.edu/SIUCMachineAvailabilityService/SIUCMachineAvailabili" +
                        "tyService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return Service1Client.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return Service1Client.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IService1,
        }
    }
}
